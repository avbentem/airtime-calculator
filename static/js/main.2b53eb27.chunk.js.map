{"version":3,"sources":["hooks/clipboard/useClipboard.tsx","hooks/clipboard/helpers.ts","lora/MacCommands.ts","components/help/HelpTooltip.tsx","components/input/helpers.tsx","components/input/NumberInput.tsx","components/input/UserConfig.ts","components/input/UserInput.tsx","hooks/state/usePrevious.ts","lora/Airtime.ts","components/result/Graph.tsx","hooks/resize/useWindowWidth.ts","components/result/helpers.ts","components/result/Result.tsx","components/result/Results.tsx","components/scroll/HorizontalScroll.tsx","components/calculator/Router.ts","components/calculator/Calculator.tsx","components/notification/Toast.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ClipboardActionToken","useClipboard","useState","notification","setNotification","useEffect","handler","event","window","getSelection","ClipboardEvent","clipboardData","selection","toString","ShareUrl","setData","location","href","preventDefault","shareUrl","title","content","Default","hasUserSelection","getTooltip","tooltip","HTMLElement","innerHTML","textContent","copyTooltip","grid","document","querySelector","label","getAttribute","groups","getChildrenByRole","columnHeaders","rows","thead","map","header","join","tbody","row","cells","cell","table","replace","copyResultGrid","createClipboardHandler","addEventListener","removeEventListener","elem","role","Array","from","querySelectorAll","copyText","text","dummy","createElement","body","appendChild","range","createRange","setStartBefore","setEndAfter","userSelection","rangeCount","getRangeAt","removeAllRanges","addRange","execCommand","removeChild","UplinkMacCommands102","name","size","DownlinkMacCommands102","HelpTooltip","showIcon","placement","children","uniqueId","id","OverlayTrigger","overlay","Tooltip","className","withFormControl","state","value","onChange","target","currentTarget","setValue","blur","e","classList","remove","NumberInput","min","max","InputGroup","Prepend","Button","onClick","variant","aria-label","FormControl","type","placeholder","Append","v","defaults","payloadSize","headerSize","codingRate","UserInput","props","useParam","defaultValue","params","result","values","split","trim","test","console","warn","substr","lowerCase","toLowerCase","mac","concat","find","cmd","macCommands","decodeUserConfig","userConfig","addMacCommand","setPacketSize","setCodingRate","setUserConfig","parts","push","encodeUserConfig","macCommandButtons","idx","key","Badge","pill","includes","Form","Row","Group","as","Col","xs","sm","lg","controlId","Label","Control","md","ButtonGroup","alert","ButtonToolbar","usePrevious","ref","useRef","current","Airtime","sf","bw","lowDrOptimize","explicitHeader","preambleLength","tSym","Math","pow","tPreamble","h","de","cr","payloadSymbNb","ceil","tPayload","Plot","createPlotlyComponent","Plotly","Graph","region","selectedPacketSize","prevRegion","prevCodingRate","windowWidth","width","setWidth","handleResize","innerWidth","useWindowWidth","xAxisFitFullRange","setXAxisFitFullRange","yAxisLogarithmic","setYAxisLogarithmic","revision","setRevision","data","autosize","margin","l","t","r","dragmode","xaxis","autorange","ticks","yaxis","fixedrange","rangemode","separatethousands","legend","orientation","xanchor","x","y","layout","setLayout","mergeAndTriggerRender","source","merge","curr","toLogarithmic","log10","currentData","dataRates","dr","maxPhyPayloadSize","maxMacPayloadSize","sizes","keys","calculate","resetVisibleTraces","visible","configured","highlight","val","marker","mode","line","dash","shape","connectgaps","hovertemplate","maxDwellTime","shapes","x0","y0","x1","y1","xref","opacity","color","annotations","yanchor","showarrow","font","annotation","xaxisFixedScaleRange","xaxisRange","style","height","onUpdate","figure","autoRange","config","responsive","displayModeBar","showEditInChartStudio","showTips","fmt","n","digits","toLocaleString","minimumFractionDigits","maximumFractionDigits","withFullStops","lines","reduce","acc","slice","undefined","Result","seconds","airtime","dcDelay","fapMessages","fapDelay","dwellTimeExceeded","sizeExceeded","notes","floor","Results","packetSize","results","tooLong","oddEven","length","data-label","HorizontalScroll","scrollContainer","hasOverflowLeft","setHasOverflowLeft","hasOverflowRight","setHasOverflowRight","scrollX","scroll","scrollBy","handleScroll","scrollLeft","scrollWidth","offsetWidth","log","parseUrl","history","pathname","networkName","regionName","parameters","network","networks","regions","setUrl","url","Calculator","changeUrl","bind","defaultRegion","active","disabled","setRegion","limitations","countries","Toast","endTime","setEndTime","lastTimeout","setLastTimeout","timeoutHandle","timeout","Date","now","clearTimeout","setTimeout","close","timeLeft","onClose","Header","toFixed","Body","App","configUrl","process","progress","setProgress","setConfig","didCancel","a","axios","get","fetchConfig","copyNotification","basename","Container","fluid","render","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b53eb27.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {AppNotification} from '../../components/notification/AppNotification';\n\n/**\n * Tokens that may be put onto the browser's clipboard to trigger special\n * handling in this hook.\n */\nexport enum ClipboardActionToken {\n  Default = 'CLIPBOARD_ACTION_DEFAULT',\n  ShareUrl = 'CLIPBOARD_ACTION_URL',\n}\n\n/**\n * Bind browser's copy event to copy the user's selection, or the active tooltip\n * window, or the result grid, all as plain text and as HTML. Return a result\n * message for feedback to the user.\n *\n * When not using the keyboard to trigger this, a mouse-out event will likely\n * already have fired for any item that may have been showing a tooltip. On\n * touch devices, the animation to close the tooltip will still be running, so\n * the copy handler can still fetch the tooltip's contents.\n */\nexport default function useClipboard() {\n  const [notification, setNotification] = useState<AppNotification>();\n\n  useEffect(() => {\n    const handler = createClipboardHandler(setNotification);\n    window.addEventListener('copy', handler);\n\n    return () => window.removeEventListener('copy', handler);\n  }, []);\n\n  return {notification};\n}\n\nfunction createClipboardHandler(setNotification: (notification: AppNotification) => void) {\n  return (event: Event) => {\n    if (window.getSelection && event instanceof ClipboardEvent && event.clipboardData) {\n      if (shareUrl(event)) {\n        setNotification({\n          title: 'A shareable URL was copied',\n          content: (\n            <>\n              The URL shares the current settings for region, overhead size and payload size. Some\n              of those may be the default values, hence not explicitly visible in the URL.\n            </>\n          ),\n        });\n        return;\n      }\n\n      if (hasUserSelection()) {\n        // Delegate to the browser and boldly assume that the system copy works\n        // if (isUrl()) {\n        setNotification({\n          title: <>The selected text was copied</>,\n          content: (\n            <>\n              {hasTooltip() ? (\n                <>\n                  <p>\n                    <strong>Did you intend to copy the tooltip?</strong> Then ensure no text is\n                    selected when copying.\n                  </p>\n                </>\n              ) : (\n                <p>\n                  To copy a tooltip, ensure no text is selected. (And use the keyboard on a desktop\n                  browser.)\n                </p>\n              )}\n              <p>To copy the result grid, make sure no text is selected and no tooltip is shown.</p>\n            </>\n          ),\n        });\n        return;\n      }\n\n      if (copyTooltip(event)) {\n        setNotification({\n          title: 'The tooltip text was copied',\n          content: 'To copy the result grid, make sure no tooltip is shown while copying.',\n        });\n        return;\n      }\n\n      if (copyResultGrid(event)) {\n        setNotification({\n          title: 'The result grid was copied',\n          content: (\n            <>\n              <p>\n                To copy a tooltip, make sure it's shown while copying. (And use the keyboard on a\n                desktop browser.)\n              </p>\n            </>\n          ),\n        });\n        return;\n      }\n\n      // Should not happen; delegate to the browser\n      setNotification({\n        title: 'Action failed',\n        content: (\n          <>\n            <p>\n              Somehow copying failed. Care to{' '}\n              <a href=\"https://github.com/avbentem/airtime-calculator/issues\">share more details</a>\n              ?\n            </p>\n          </>\n        ),\n      });\n      return;\n    }\n\n    setNotification({\n      title: 'Unsupported browser',\n      content:\n        'Your browser does not support the enhanced copy function to copy the tooltip or result grid.',\n    });\n  };\n}\n\n/**\n * Determine if the user selected some text.\n *\n * This does not work on the content of `<textarea>` and `<input>` elements in\n * Firefox, Edge (Legacy) and Internet Explorer; see the June 2001 issue report\n * at https://bugzilla.mozilla.org/show_bug.cgi?id=85686 and see\n * https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection\n */\nfunction hasUserSelection(): boolean {\n  if (window.getSelection) {\n    const selection = (window.getSelection() || '').toString();\n    return selection !== '' && selection !== ClipboardActionToken.Default;\n  }\n  // Unsupported browser\n  return false;\n}\n\nfunction shareUrl(event: ClipboardEvent): boolean {\n  if (!window.getSelection || !event.clipboardData) {\n    return false;\n  }\n  const selection = window.getSelection();\n  if (selection && selection.toString() === ClipboardActionToken.ShareUrl) {\n    event.clipboardData.setData(\n      'text/html',\n      `Learn about the limits of LoRaWAN, using the online <a href=\"${window.location.href}\">airtime calculator</a>.`\n    );\n    event.clipboardData.setData(\n      'text/plain',\n      `Learn about the limits of LoRaWAN, using the online airtime calculator at ${window.location.href}`\n    );\n    event.preventDefault();\n    return true;\n  }\n  return false;\n}\n\nfunction getTooltip() {\n  return document.querySelector('[role=\"tooltip\"] .tooltip-inner');\n}\n\nfunction hasTooltip(): boolean {\n  return getTooltip() !== null;\n}\n\nfunction copyTooltip(event: ClipboardEvent): boolean {\n  if (!event.clipboardData) {\n    return false;\n  }\n  const tooltip = getTooltip();\n  if (tooltip) {\n    if (tooltip instanceof HTMLElement && tooltip.innerHTML) {\n      event.clipboardData.setData('text/html', tooltip.innerHTML);\n    }\n    // Beware that when the plain text content is longer than the HTML content,\n    // Discourse will somehow prefer the plain text over the HTML version:\n    // https://github.com/discourse/discourse/blob/v2.5.0/app/assets/javascripts/discourse/app/components/d-editor.js#L904\n    // So, don't boldly add the current URL to the plain text content.\n    if (tooltip && tooltip.textContent) {\n      event.clipboardData.setData('text/plain', tooltip.textContent);\n    }\n    event.preventDefault();\n    return true;\n  }\n  return false;\n}\n\nfunction getResultGrid() {\n  return document.querySelector('[role=\"table\"]');\n}\n\nfunction getChildrenByRole(elem: Element, role: string) {\n  return Array.from(elem.querySelectorAll(`[role=\"${role}\"]`));\n}\n\nfunction copyResultGrid(event: ClipboardEvent): boolean {\n  if (!event.clipboardData) {\n    return false;\n  }\n  const grid = getResultGrid();\n  if (grid) {\n    const label = grid.getAttribute('data-label');\n    const groups = getChildrenByRole(grid, 'rowgroup');\n    const columnHeaders = getChildrenByRole(groups[0], 'columnheader');\n    const rows = getChildrenByRole(groups[1], 'row');\n\n    const thead = `<thead>\\n<tr>${columnHeaders\n      .map((header) => `<th>${header.textContent}</th>`)\n      .join('')}</tr>\\n</thead>`;\n\n    const getCells = (row: Element) => getChildrenByRole(row, 'cell');\n\n    const tr = (cells: Element[]) =>\n      `<tr>${cells.map((cell) => `<td>${cell.textContent}</td>`).join('')}</tr>`;\n\n    const tbody = `<tbody>\\n${rows.map(getCells).map(tr).join('\\n')}\\n</tbody>`;\n\n    // The grid data includes zero-width spaces for formatting while copying.\n    // Using the plain text `&lt;br>` is an explicit hack for Discourse; see\n    // README.md. It won't look nice in, e.g., Word.\n    const table = `<table>\\n${thead}\\n${tbody}\\n</table>`\n      .replace(/\\u200B\\u200B/g, '&lt;br>')\n      .replace(/\\u200B/g, ' ');\n\n    event.clipboardData.setData(\n      'text/html',\n      `<p>${label}</p>\n${table}\n<p>See <a href=\"${window.location.href}\">the airtime calculator</a> for many more details and interactive results.</p>`\n    );\n\n    // In Discourse, this is also used when pasting into a code block\n    event.clipboardData.setData(\n      'text/plain',\n      `Unfortunately, the table layout is not supported when pasting as plain text.\n\nPlease paste as formatted text, or see ${window.location.href} for many more details and formatted, interactive results.`\n    );\n\n    event.preventDefault();\n    return true;\n  }\n\n  return false;\n}\n","import {ClipboardActionToken} from './useClipboard';\n/**\n * Some helpers to trigger the browser's built-in clipboard events, which will\n * be captured by the useClipboard hook to figure out the expected action and\n * provide some user feedback.\n *\n * When there is no need for the user feedback or the centralized logic to\n * determine what to copy, then see https://whatwebcando.today/clipboard.html\n */\n\n/**\n * Trigger the built-in copy event without providing any specific content.\n */\nexport function triggerCopy() {\n  // For most browsers `document.execCommand('copy')` suffices, regardless if\n  // the user selected some text. But Safari refuses that if the user has not\n  // selected anything. So, if it fails, boldly assume the user did not select\n  // anything and pass a token that the useClipboard hook will handle.\n  if (!document.execCommand('copy')) {\n    if (!copyText(ClipboardActionToken.Default)) {\n      alert('Sorry, it seems your browser does not support this.');\n    }\n  }\n}\n\n/**\n * Trigger the built-in copy event to copy a shareable URL.\n */\nexport function triggerCopyUrl() {\n  // We could pass window.location.href directly, but using the token allows\n  // subsequent handling in the useClipboard hook to use the browser's extended\n  // ClipboardEvent#clipboardData to provide both text and HTML content.\n  if (!copyText(ClipboardActionToken.ShareUrl)) {\n    alert('Sorry, your browser does not support this. Please copy the URL from the location bar.');\n  }\n}\n\n/**\n * Put any plain text we like on the clipboard, while also making the browser\n * provide a full blown ClipboardEvent for further handling.\n */\nfunction copyText(text: string): boolean {\n  // Most examples would simply use an `<input>` element along with `.select()`.\n  // But as the useClipboard hook relies on `window.getSelection()`, which\n  // does not work on the content of `<textarea>` and `<input>` elements in\n  // Firefox, Edge (Legacy) and Internet Explorer, we need some trickery; see\n  // https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection\n  const selection = window.getSelection && window.getSelection();\n  if (!selection) {\n    return false;\n  }\n\n  const dummy = document.createElement('p');\n  dummy.textContent = text;\n  document.body.appendChild(dummy);\n\n  const range = document.createRange();\n  range.setStartBefore(dummy);\n  range.setEndAfter(dummy);\n\n  // Preserve any user selection (assuming they can only select a single range)\n  const userSelection = selection.rangeCount > 0 ? selection.getRangeAt(0) : false;\n\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('copy');\n  selection.removeAllRanges();\n\n  if (userSelection) {\n    selection.addRange(userSelection);\n  }\n\n  document.body.removeChild(dummy);\n  return true;\n}\n","export type MacCommand = {\n  name: string;\n  /**\n   * The command's payload size, excluding the byte for the MAC command itself.\n   */\n  size: number;\n};\n\n/**\n * The LoRaWAN 1.0.2 MAC commands and their payload sizes, if any (excluding\n * the one byte for the MAC command itself). Some commands can be present in\n * the very same LoRaWAN packet multiple times.\n */\nexport const UplinkMacCommands102: MacCommand[] = [\n  {name: 'LinkCheckReq', size: 0},\n  {name: 'LinkAdrAns', size: 1},\n  {name: 'DutyCycleAns', size: 0},\n  {name: 'RXParamSetupAns', size: 1},\n  {name: 'DevStatusAns', size: 2},\n  {name: 'NewChannelAns', size: 1},\n  {name: 'DlChannelAns', size: 1},\n  {name: 'RXTimingSetupAns', size: 0},\n  {name: 'TxParamSetupAns', size: 0},\n];\n\nexport const DownlinkMacCommands102: MacCommand[] = [\n  {name: 'LinkCheckAns', size: 2},\n  {name: 'LinkAdrReq', size: 4},\n  {name: 'DutyCycleReq', size: 1},\n  {name: 'RXParamSetupReq', size: 4},\n  {name: 'DevStatusReq', size: 0},\n  {name: 'NewChannelReq', size: 5},\n  {name: 'DlChannelReq', size: 4},\n  {name: 'RXTimingSetupReq', size: 1},\n  {name: 'TxParamSetupReq', size: 1},\n];\n","import React, {PropsWithChildren, useState} from 'react';\nimport {Placement} from 'react-bootstrap/Overlay';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport {uniqueId} from 'lodash';\nimport './HelpTooltip.scss';\n\ntype HelpTooltipProps = {\n  content?: string | React.ReactElement;\n  showIcon?: boolean;\n  placement?: Placement;\n};\n\n/**\n * Add an information icon for a tooltip to the given element, if the optional\n * help text is set.\n */\nexport default function HelpTooltip({\n  content,\n  showIcon = false,\n  placement = 'auto-end',\n  children,\n}: PropsWithChildren<HelpTooltipProps>) {\n  const [id] = useState(() => uniqueId('HelpTooltip-'));\n\n  if (!content) {\n    return <>{children}</>;\n  }\n\n  return (\n    <OverlayTrigger placement={placement} overlay={<Tooltip id={id}>{content}</Tooltip>}>\n      <div>\n        {children}\n        {showIcon && (\n          <sup>\n            <small className=\"text-muted\">&#9432;</small>\n          </sup>\n        )}\n      </div>\n    </OverlayTrigger>\n  );\n}\n","import React, {Dispatch, MouseEvent, SetStateAction} from 'react';\n\n/**\n * Get an object that can be spread for use in Bootstrap forms, like\n * `<FormControl {...withFormControl(state)}/>`.\n */\nexport function withFormControl<T>(state: {value: T; setValue: Dispatch<SetStateAction<T>>}) {\n  // See https://github.com/react-bootstrap/react-bootstrap/issues/2781\n  function onChange(event: React.FormEvent<any>) {\n    const target = event.currentTarget;\n    state.setValue(typeof state.value === 'number' ? (+target.value as any) : target.value);\n  }\n\n  // FormControl expects a string for value\n  return {value: '' + state.value, onChange};\n}\n\n/**\n * Remove focus from a clicked element, and remove any `active` class to hide\n * tooltips.\n *\n * Removing focus kills keyboard navigation. Also, on touch devices that emulate\n * `:hover`, the element may still be stuck in some active state after touch.\n */\nexport function blur(e: MouseEvent) {\n  // We need `currentTarget` rather than `target`, to support clicking the\n  // icon in the button, in which case the button is not the (first) target\n  (e.currentTarget as HTMLElement).blur();\n  (e.currentTarget as HTMLElement).classList.remove('active');\n}\n","import React, {Dispatch, MouseEvent, SetStateAction, useEffect} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport {blur, withFormControl} from './helpers';\nimport './NumberInput.scss';\n\ntype NumberInputProps = {\n  min?: number;\n  max?: number;\n  value: number;\n  setValue: Dispatch<SetStateAction<number>>;\n};\n\n/**\n * A Bootstrap form input field with decrement and increment buttons.\n */\nexport default function NumberInput({min = 0, max, value, setValue}: NumberInputProps) {\n  function dec(e: MouseEvent) {\n    if (value > min) {\n      setValue(value - 1);\n    }\n    blur(e);\n  }\n\n  function inc(e: MouseEvent) {\n    if (typeof max === 'undefined' || value < max) {\n      setValue((v) => v + 1);\n    }\n    blur(e);\n  }\n\n  useEffect(() => {\n    setValue(value);\n  }, [value, setValue]);\n\n  return (\n    <InputGroup>\n      <InputGroup.Prepend>\n        <Button onClick={dec} variant=\"outline-secondary\" aria-label=\"Decrease\">\n          -\n        </Button>\n      </InputGroup.Prepend>\n      <FormControl\n        {...withFormControl({value, setValue})}\n        type=\"number\"\n        className=\"NumberInput\"\n        min={min}\n        placeholder=\"Enter number\"\n      />\n      <InputGroup.Append>\n        <Button onClick={inc} variant=\"outline-secondary\" aria-label=\"Increase\">\n          +\n        </Button>\n      </InputGroup.Append>\n    </InputGroup>\n  );\n}\n","import {CodingRate} from '../../lora/Airtime';\nimport {DownlinkMacCommands102, MacCommand, UplinkMacCommands102} from '../../lora/MacCommands';\n\ntype UserConfig = {\n  macCommands?: MacCommand[];\n} & typeof defaults;\n\nexport const defaults = {\n  payloadSize: 12,\n  headerSize: 13,\n  codingRate: '4/5' as CodingRate,\n};\n\n/**\n * Takes the first integer argument to be the application payload size, the\n * second as the LoRaWAN header size, a single string starting with \"cr\" as the\n * coding rate, and all other values as possible MAC commands.\n */\nexport function decodeUserConfig(params: string = ''): UserConfig {\n  const result: UserConfig = {} as any;\n  const values = params.split(',').map((v) => v.trim());\n  for (let value of values) {\n    if (value === '') {\n      continue;\n    }\n\n    if (/^\\d+$/.test(value)) {\n      // The first integer denotes the payload size, the second the header size\n      if (!result.payloadSize) {\n        result.payloadSize = +value;\n      } else if (!result.headerSize) {\n        result.headerSize = +value;\n      } else {\n        console.warn(\n          `Ignored numeric value ${value}; already parsed both payloadSize and headerSize`\n        );\n      }\n      continue;\n    }\n\n    if (/^cr4[5678]$/i.test(value)) {\n      if (!result.codingRate) {\n        result.codingRate = value.substr(2).split('').join('/') as CodingRate;\n      } else {\n        console.warn(`Ignored string value ${value}; already parsed codingRate`);\n      }\n      continue;\n    }\n\n    // Case-insensitive search in both the uplink and downlink MAC commands\n    const lowerCase = value.toLowerCase();\n    const mac = UplinkMacCommands102.concat(DownlinkMacCommands102).find(\n      (cmd) => cmd.name.toLowerCase() === lowerCase\n    );\n    if (mac) {\n      result.macCommands = (result.macCommands || []).concat(mac);\n    } else {\n      console.warn(`Ignored string value ${value}; no matching MAC command found`);\n    }\n  }\n\n  return {...defaults, ...result};\n}\n\n/**\n * Encodes the user inputs for use in an URL segment.\n */\nexport function encodeUserConfig(\n  payloadSize: number,\n  headerSize: number,\n  codingRate?: CodingRate,\n  macCommands?: MacCommand[]\n) {\n  const parts: (string | number)[] = [];\n  if (payloadSize !== defaults.payloadSize || headerSize !== defaults.headerSize) {\n    parts.push(payloadSize);\n  }\n  if (headerSize !== defaults.headerSize) {\n    parts.push(headerSize);\n  }\n  if (codingRate && codingRate !== defaults.codingRate) {\n    parts.push('cr' + codingRate.replace('/', ''));\n  }\n  if (macCommands) {\n    parts.push(...macCommands.map((cmd) => cmd.name));\n  }\n  return parts.join(',');\n}\n","import React, {MouseEvent, useEffect, useState} from 'react';\nimport Badge from 'react-bootstrap/Badge';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport {FaCopy, FaLink} from 'react-icons/fa';\nimport {triggerCopy, triggerCopyUrl} from '../../hooks/clipboard/helpers';\nimport {CodingRate} from '../../lora/Airtime';\nimport {MacCommand, UplinkMacCommands102} from '../../lora/MacCommands';\nimport HelpTooltip from '../help/HelpTooltip';\nimport {blur, withFormControl} from './helpers';\nimport NumberInput from './NumberInput';\nimport {decodeUserConfig, encodeUserConfig} from './UserConfig';\n\n/**\n * The components determines its parameters given its URL fragment, and only\n * tells the parent component about the total packet size and the coding rate.\n */\ntype UserConfigProps = {\n  userConfig?: string;\n  setPacketSize: (size: number) => void;\n  setCodingRate: (cr: CodingRate) => void;\n  setUserConfig: (fragment: string) => void;\n};\n\n/**\n * Form using some controlled components to input the packet's details.\n *\n * TODO The state is maintained by the parent component.\n *\n * This reports the total LoRa packet size, the coding rate and its own\n * fragment in the URL to its parent.\n *\n * /ttn/eu868/1.0.x,4/5,15,LinkCheckReq,LinkAdrAns,DutyCycleAns,RXParamSetupAns,DevStatusAns,NewChannelAns,RXTimingSetupAns,TxParamSetupAns,DlChannelAns\n *\n *\n */\nexport default function UserInput(props: UserConfigProps) {\n  function useParam<T>(defaultValue: T) {\n    const [value, setValue] = useState(defaultValue);\n    return {value, setValue};\n  }\n\n  const params = decodeUserConfig(props.userConfig);\n  const payloadSize = useParam(params.payloadSize);\n  const headerSize = useParam(params.headerSize);\n  const codingRate = useParam(params.codingRate);\n  const macCommands = useParam(params.macCommands);\n\n  function increaseHeaderSize(size: number) {\n    headerSize.setValue((v) => v + size);\n    // Same result:\n    // headerSize.setValue(headerSize.value + size);\n  }\n\n  function addMacCommand(cmd: MacCommand) {\n    macCommands.setValue((macCommands.value || []).concat(cmd));\n    increaseHeaderSize(cmd.size + 1);\n  }\n\n  useEffect(() => {\n    props.setPacketSize(headerSize.value + payloadSize.value);\n  }, [props, headerSize.value, payloadSize.value]);\n\n  useEffect(() => {\n    props.setCodingRate(codingRate.value);\n  }, [props, codingRate.value]);\n\n  /**\n   * Tells the parent that the user's configuration has changed, to keep the\n   * URL synchronized with the current inputs.\n   *\n   * Rather than this callback, we could use a Route in the parent component\n   * and manage our own URL segment here. However, by design, when the user\n   * configuration only uses default values then that segment would not exist.\n   * And as the routing does not provide an API to only change a specific URL\n   * segment, this component would need to know about the URL segments of its\n   * parent to reliably change its own segment. (Like to detect excessive\n   * slashes and avoid endless loops.) Instead, the URL segment is passed to\n   * this component, and this component notifies the parent about changes. The\n   * parent needs to know about this segment anyhow, like when the parent\n   * component changes the region for which the user configuration should be\n   * preserved.\n   */\n  useEffect(() => {\n    props.setUserConfig(\n      encodeUserConfig(payloadSize.value, headerSize.value, codingRate.value, macCommands.value)\n    );\n  }, [props, headerSize.value, payloadSize.value, codingRate.value, macCommands.value]);\n\n  function copy(e: MouseEvent) {\n    triggerCopy();\n    blur(e);\n  }\n\n  function copyUrl(e: MouseEvent) {\n    triggerCopyUrl();\n    blur(e);\n  }\n\n  const macCommandButtons = UplinkMacCommands102.map((cmd, idx) => (\n    <div key={idx}>\n      <Badge\n        onClick={() => addMacCommand(cmd)}\n        pill\n        variant={params.macCommands && params.macCommands.includes(cmd) ? 'primary' : 'secondary'}\n      >\n        {cmd.name} {cmd.size}\n      </Badge>\n      &nbsp;\n    </div>\n  ));\n\n  return (\n    <>\n      <Form>\n        <Form.Row className=\"justify-content-center\">\n          <Form.Group as={Col} xs={4} sm={3} lg={2} controlId=\"formOverheadSize\">\n            <HelpTooltip\n              showIcon={true}\n              content={\n                <>\n                  For a data uplink and downlink, the overhead is at least 12 bytes: MHDR (1),\n                  DevAddr (4), FCtrl (1), FCnt (2) and MIC (4). When an application payload is\n                  present, FPort (1) is given too. Also, FOpts may include up to 15 bytes for MAC\n                  commands.\n                </>\n              }\n            >\n              <Form.Label>overhead size</Form.Label>\n            </HelpTooltip>\n            {/* Length field for FCtrl is 4 bits, hence max 15 bytes for MAC commands */}\n            <NumberInput {...headerSize} min={12} max={28} />\n          </Form.Group>\n\n          <Form.Group as={Col} xs={4} sm={3} lg={2} controlId=\"formApplicationPayloadSize\">\n            <HelpTooltip\n              showIcon={true}\n              content={\n                <>\n                  The application payload size. Maximum 222 bytes, assuming 13 bytes of overhead.\n                  May be empty for a simple ACK or if the packet only includes MAC commands. For the\n                  time on air, only the <em>total</em> size matters, being the overhead size plus\n                  the application payload size.\n                </>\n              }\n            >\n              <Form.Label>payload size</Form.Label>\n            </HelpTooltip>\n            {/* When operating in \"repeater compatible\" mode, no MACPayload may be larger than 230\n             bytes, and full packet PHYPayload = MHDR[1] | MACPayload[..] | MIC[4]. So, assuming a\n             13 bytes overhead, 230 - 8 = 222 bytes application payload. */}\n            <NumberInput {...payloadSize} max={222} />\n          </Form.Group>\n\n          {/* Only expose the coding rate input when a non-default is used in the URL. */}\n          {/* A future version may include some \"advanced settings\" option. */}\n          {codingRate.value !== '4/5' && (\n            <Form.Group as={Col} xs={4} sm={3} lg={2} controlId=\"formCodingRate\">\n              <HelpTooltip\n                showIcon={true}\n                content=\"The coding rate (CR) used for forward error correction (FEC). Always 4/5 for LoRaWAN.\"\n              >\n                <Form.Label>coding rate</Form.Label>\n              </HelpTooltip>\n              <Form.Control as=\"select\" {...withFormControl(codingRate)}>\n                <option value=\"4/5\">4/5</option>\n                <option value=\"4/6\">4/6</option>\n                <option value=\"4/7\">4/7</option>\n                <option value=\"4/8\">4/8</option>\n              </Form.Control>\n            </Form.Group>\n          )}\n\n          <Form.Group as={Col} xs={3} sm={2} md={1} controlId=\"formShare\">\n            <HelpTooltip\n              showIcon={true}\n              content={\n                <>\n                  <p>\n                    Use <FaCopy size=\"1em\" /> or your keyboard to copy any selected text, if\n                    applicable. Otherwise, when a tooltip is active, the tooltip's text is copied.\n                    (This needs the keyboard on a desktop browser.) Or else, this copies the\n                    results.\n                  </p>\n                  <p>\n                    Use <FaLink size=\"1em\" /> to copy a shareable URL.\n                  </p>\n                </>\n              }\n            >\n              <Form.Label>share</Form.Label>\n            </HelpTooltip>\n            <div>\n              <ButtonGroup>\n                <Button variant=\"outline-secondary\" aria-label=\"Copy\" onClick={copy}>\n                  <FaCopy size=\"1em\" />\n                </Button>\n                <Button variant=\"outline-secondary\" aria-label=\"Share\" onClick={copyUrl}>\n                  <FaLink size=\"1em\" />\n                </Button>\n              </ButtonGroup>\n            </div>\n          </Form.Group>\n        </Form.Row>\n\n        {/* TODO Work in progress: somehow allow for adding/removing MAC commands; for now only when already in URL. */}\n        {params.macCommands && (\n          <>\n            <Form.Row className=\"justify-content-md-center\">\n              <Col md=\"8\">\n                <Form.Label>MAC command</Form.Label>\n                <ButtonToolbar aria-label=\"MAC commands\">{macCommandButtons}</ButtonToolbar>\n              </Col>\n            </Form.Row>\n            <br />\n          </>\n        )}\n      </Form>\n    </>\n  );\n}\n","import {useEffect, useRef} from 'react';\n\n/**\n * Keep track of the previous value.\n *\n * See https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nexport default function usePrevious<T>(value: T) {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n","export type CodingRate = '4/5' | '4/6' | '4/7' | '4/8';\n\nexport default class Airtime {\n  /**\n   * Calculates the LoRa airtime in milliseconds.\n   *\n   * See https://lora-developers.semtech.com/library/product-documents/ for the\n   * equations in AN1200.13 \"LoRa Modem Designer’s Guide\".\n   *\n   * Spreading factor and bandwidth together define the so called data rate.\n   *\n   * @param size full packet size. For LoRaWAN this includes the LoRaWAN MAC\n   *   header (about 9 bytes when no MAC commands are included), the application\n   *   payload, and the MIC (4 bytes).\n   * @param sf spreading factor, 6..12 (6 is not used in LoRaWAN)\n   * @param bw bandwidth in kHz, typically 125, 250 or 500\n   * @param codingRate coding rate, '4/5', '4/6', '4/7' or '4/8'. For LoRaWAN\n   *   this is always '4/5'.\n   * @param lowDrOptimize low data rate optimization, 'auto', true or false.\n   *   This is usually enabled for low data rates, to avoid issues with drift\n   *   of the crystal reference oscillator due to either temperature change or\n   *   motion. When enabled, specifically for 125 kHz bandwidth and SF11 and\n   *   SF12, this adds a small overhead to increase robustness to reference\n   *   frequency variations over the timescale of the packet.\n   * @param explicitHeader if the LoRa header is present, true or false. This\n   *   is the low-level header that defines, e.g., coding rate, payload length\n   *   and the presence of a CRC checksum. In plain LoRa it can be left out if\n   *   each transmission uses the very same parameters and the receiver is\n   *   aware of those. For LoRaWAN, where at least the payload length is not\n   *   fixed, the low-level LoRa header is always enabled.\n   * @param preambleLength number of preamble symbols. For LoRaWAN this is 8.\n   */\n  static calculate(\n    size: number,\n    sf: number,\n    bw: number,\n    codingRate: CodingRate = '4/5',\n    lowDrOptimize: 'auto' | true | false = 'auto',\n    explicitHeader: boolean = true,\n    preambleLength = 8\n  ) {\n    // All times in milliseconds\n    const tSym = (Math.pow(2, sf) / (bw * 1000)) * 1000;\n    const tPreamble = (preambleLength + 4.25) * tSym;\n\n    // H = 0 when the header is enabled, H = 1 when no header is present.\n    const h = explicitHeader ? 0 : 1;\n    // DE = 1 when the low data rate optimization is enabled, DE = 0 for\n    // disabled. When 'auto' then only for SF11 and SF12, on 125kHz. Allow for\n    // programming errors that pass string values from, e.g., some form input.\n    const de =\n      (lowDrOptimize === 'auto' && +bw === 125 && +sf >= 11) || lowDrOptimize === true ? 1 : 0;\n    // CR is the coding rate from 1 to 4\n    const cr = +codingRate[2] - 4;\n    const payloadSymbNb =\n      8 +\n      Math.max(\n        Math.ceil((8 * size - 4 * sf + 28 + 16 - 20 * h) / (4 * (sf - 2 * de))) * (cr + 4),\n        0\n      );\n    const tPayload = payloadSymbNb * tSym;\n\n    return tPreamble + tPayload;\n  }\n}\n","import {merge} from 'lodash';\nimport Plotly from 'plotly.js-basic-dist';\nimport React, {useEffect, useState} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport {FaRulerHorizontal, FaRulerVertical} from 'react-icons/fa';\nimport {Figure, PlotParams} from 'react-plotly.js';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport {Region} from '../../AppConfig';\nimport useWindowWidth from '../../hooks/resize/useWindowWidth';\nimport usePrevious from '../../hooks/state/usePrevious';\nimport Airtime, {CodingRate} from '../../lora/Airtime';\nimport HelpTooltip from '../help/HelpTooltip';\n\n// Using `import Plot from 'react-plotly.js'` needs the full blown `plotly.js`\n// as a peer dependency; here use the limited `plotly.js-basic-dist` instead\nconst Plot = createPlotlyComponent(Plotly);\n\ntype GraphProps = {\n  region: Region;\n  selectedPacketSize: number;\n  codingRate: CodingRate;\n};\n\n/**\n * A graph showing time on air for all the current region's data rates (SF,\n * bandwidth) and their supported full LoRaWAN payload sizes.\n *\n * The graph resets the visible traces when the region or coding rate changes,\n * but preserves vertical scale, horizontal range and any panning. Changing the\n * window width will only reset panning, but keep the other choices.\n */\nexport default function Graph({region, selectedPacketSize, codingRate}: GraphProps) {\n  const prevRegion = usePrevious(region);\n  const prevCodingRate = usePrevious(codingRate);\n  const windowWidth = useWindowWidth();\n\n  const [xAxisFitFullRange, setXAxisFitFullRange] = useState(true);\n  const [yAxisLogarithmic, setYAxisLogarithmic] = useState(false);\n  const [revision, setRevision] = useState(0);\n  const [data, setData] = useState<PlotParams['data']>([]);\n\n  const [layout, setLayout] = useState<PlotParams['layout']>({\n    autosize: true,\n    margin: {l: 70, t: 0, r: 5},\n    dragmode: 'pan',\n    xaxis: {\n      autorange: false,\n      range: [0, 1],\n      title: 'total packet size (overhead + application payload)',\n      ticks: 'outside',\n    },\n    yaxis: {\n      ticks: 'outside',\n      autorange: true,\n      fixedrange: true,\n      rangemode: 'tozero',\n      separatethousands: true,\n    },\n    legend: {\n      orientation: 'h',\n      xanchor: 'center',\n      x: 0.5,\n      y: -0.2,\n    },\n  });\n\n  /**\n   * Increment the plot's revision to force updating the graph even if the\n   * identities of `data` and `layout` don't change. See\n   * https://github.com/plotly/react-plotly.js/blob/master/README.md#refreshing-the-plot\n   */\n  const triggerRender = () => setRevision((curr) => ++curr);\n\n  /**\n   * Merge the given objects and force updating the graph.\n   */\n  const mergeAndTriggerRender = <T,>(target: T, source: T | Partial<T>): T => {\n    merge(target, source);\n    // We cannot delegate to `triggerRender` as then the linter can no longer\n    // properly determine the dependencies, and would expect us to include this\n    // very method in the useEffect's dependencies\n    setRevision((curr) => ++curr);\n    return target;\n  };\n\n  /**\n   * Ensure any user interaction did not pan below zero, or fix that if it did.\n   *\n   * React Plotly behaves a bit odd. It needs one to provide state for `data`\n   * (including user interactions that change visibility of traces) and `layout`\n   * (including the updated range due to panning) whenever it needs to rerender.\n   * So, this handler would also be a good place to store the plot's full state.\n   * However, Plotly also mutates the input that it's given: before this handler\n   * is invoked, Plotly has already changed our state for `data` and `layout`.\n   * As such, we don't need to update the state again, not even when we need to\n   * fix the horizontal range to ensure it's always positive.\n   *\n   * See https://github.com/plotly/react-plotly.js/issues/43 and\n   * https://github.com/plotly/react-plotly.js/blob/master/README.md#state-management\n   */\n  const onUpdate = (figure: Readonly<Figure>) => {\n    const range = figure.layout.xaxis?.range;\n    if (range && range[0] < 0) {\n      // For auto-range, Plotly adds some padding within the graph. Remove the\n      // left padding. There will also be some padding on the right (about the\n      // same size as the one on the left); keep that to show that the full\n      // graph is visible. For manual panning below 0, add the left padding to\n      // the right, for otherwise the range gets smaller for each fix.\n      const autoRange = figure.layout.xaxis?.autorange;\n      mergeAndTriggerRender(figure.layout, {\n        xaxis: {\n          range: [0, range[1] - (autoRange ? 0 : range[0])],\n          autorange: false,\n        },\n      });\n    }\n  };\n\n  /**\n   * Toggle the y-axis between linear and logarithmic scale.\n   */\n  const toggleScale = () => {\n    setYAxisLogarithmic((curr) => !curr);\n  };\n\n  /**\n   * Toggle the range of the x-axis between using a fixed scale, and fitting the\n   * full graph.\n   */\n  const toggleFitFullRange = () => {\n    setXAxisFitFullRange((curr) => !curr);\n  };\n\n  /**\n   * Convert the given number to a logarithmic scale, or vice versa, like to\n   * properly position annotations on a logarithmic scale.\n   *\n   * For annotations, see https://github.com/plotly/plotly.js/issues/1258\n   */\n  const toLogarithmic = (toLogarithmic: boolean, y: number | string | undefined) => {\n    return toLogarithmic ? Math.log10(+(y ?? 1)) : Math.pow(10, +(y ?? 0));\n  };\n\n  useEffect(() => {\n    if (!codingRate) {\n      return;\n    }\n\n    // This fully replaces the object that's currently in our state, so no need\n    // to manually trigger a Plotly rendering\n    setData((currentData) => {\n      return region.dataRates.map(\n        (dr, idx): Plotly.Data => {\n          // PHYPayload = MHDR[1] | MACPayload[..] | MIC[4]\n          const maxPhyPayloadSize = dr.maxMacPayloadSize + 5;\n          const sizes = Array.from(Array(maxPhyPayloadSize + 1).keys());\n\n          const values = sizes.map((size) => {\n            const airtime = Airtime.calculate(size, dr.sf, dr.bw, codingRate);\n            return {\n              y: airtime,\n              size: size === selectedPacketSize ? 8 : 4,\n            };\n          });\n\n          const resetVisibleTraces = codingRate !== prevCodingRate || region !== prevRegion;\n          const current = currentData[idx]?.visible;\n          const configured = dr.highlight === 'low' ? 'legendonly' : true;\n          const visible = resetVisibleTraces ? configured : current ?? configured;\n\n          return {\n            x: sizes,\n            y: values.map((val) => val.y),\n            visible: visible,\n            name: `${dr.name} SF${dr.sf}BW${dr.bw}`,\n            marker: {\n              size: values.map((val) => val.size),\n            },\n            type: 'scatter',\n            mode: 'lines+markers',\n            line: {\n              dash: 'dot',\n              shape: 'hvh',\n              width: 0.5,\n            },\n            connectgaps: true,\n            // See https://plotly.com/javascript/reference/#scatter-hovertemplate\n            hovertemplate: '%{y:,.1f} ms<extra>%{x} bytes on %{fullData.name}</extra>',\n          };\n        }\n      );\n    });\n\n    if (region.maxDwellTime) {\n      setLayout((current) => {\n        const color = 'red';\n        return mergeAndTriggerRender(current, {\n          shapes: [\n            {\n              type: 'line',\n              x0: 0,\n              y0: region.maxDwellTime,\n              x1: 1,\n              y1: region.maxDwellTime,\n              xref: 'paper',\n              opacity: 0.2,\n              line: {\n                color: color,\n                width: 2,\n                dash: 'dashdot',\n              },\n            },\n          ],\n          // Shapes don't support hover text, so add an annotation\n          annotations: [\n            {\n              text: 'max dwell time',\n              x: 1,\n              xref: 'paper',\n              xanchor: 'right',\n              y:\n                current.yaxis?.type === 'log'\n                  ? toLogarithmic(true, region.maxDwellTime)\n                  : region.maxDwellTime,\n              yanchor: 'bottom',\n              showarrow: false,\n              font: {\n                color: color,\n              },\n              opacity: 0.4,\n            },\n          ],\n        });\n      });\n    } else if (prevRegion?.maxDwellTime) {\n      setLayout((current) => {\n        delete current.shapes;\n        delete current.annotations;\n        triggerRender();\n        return current;\n      });\n    }\n  }, [region, prevRegion, codingRate, prevCodingRate, selectedPacketSize]);\n\n  useEffect(() => {\n    setLayout((current) => {\n      return mergeAndTriggerRender(current, {\n        yaxis: {\n          type: yAxisLogarithmic ? 'log' : 'linear',\n          title: yAxisLogarithmic ? 'airtime (ms, logarithmic)' : 'airtime (ms)',\n        },\n        annotations: current.annotations?.map((annotation) => ({\n          y: toLogarithmic(yAxisLogarithmic, annotation.y),\n        })),\n      });\n    });\n  }, [yAxisLogarithmic]);\n\n  useEffect(() => {\n    setLayout((current) => {\n      // 970 - 658 = 312\n      const xaxisFixedScaleRange = [0, (windowWidth - 312) / 6];\n\n      const xaxisRange = xAxisFitFullRange\n        ? current.xaxis?.range ?? xaxisFixedScaleRange\n        : xaxisFixedScaleRange;\n\n      return mergeAndTriggerRender(current, {\n        xaxis: {\n          autorange: xAxisFitFullRange,\n          fixedrange: xAxisFitFullRange,\n          range: xaxisRange,\n        },\n      });\n    });\n  }, [windowWidth, xAxisFitFullRange]);\n\n  if (!codingRate) {\n    return null;\n  }\n\n  return (\n    <>\n      <Plot\n        style={{width: '100%', height: '400px'}}\n        // See comments above about Plotly mutating `data` and `layout`\n        data={data}\n        layout={layout}\n        revision={revision}\n        onUpdate={onUpdate}\n        config={{\n          // This also needs width: 100% for the <Plot> component\n          responsive: true,\n          displayModeBar: false,\n          showEditInChartStudio: false,\n          showTips: false,\n          // showLink: true,\n          // linkText: 'analyze chart',\n          // plotlyServerURL: 'https://chart-studio.plotly.com',\n        }}\n      />\n      <ButtonGroup>\n        <HelpTooltip\n          content={<>Switch between a linear or logarithmic scale for the vertical axis.</>}\n        >\n          <Button variant=\"outline-secondary\" aria-label=\"Share\" onClick={toggleScale}>\n            <FaRulerVertical size=\"1em\" />\n            &nbsp;linear / logarithmic\n          </Button>\n        </HelpTooltip>\n        &nbsp;\n        <HelpTooltip\n          content={\n            <>\n              Switch between a compressed horizontal range to fit all allowed payload sizes, or a\n              scrollable range with a fixed-width scale per payload size.\n            </>\n          }\n        >\n          <Button variant=\"outline-secondary\" aria-label=\"Copy\" onClick={toggleFitFullRange}>\n            <FaRulerHorizontal size=\"1em\" />\n            &nbsp;fit all / scrollable\n          </Button>\n        </HelpTooltip>\n      </ButtonGroup>\n    </>\n  );\n}\n","import {useEffect, useState} from 'react';\n\n/**\n * Return the current window width.\n *\n * This ignores the window height, to avoid changes when mobile browsers\n * show/hide their location bar. This does not do any debouncing.\n */\nexport default function useWindowWidth() {\n  const [width, setWidth] = useState<number>(-1);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n\n    window.addEventListener('resize', handleResize);\n    handleResize();\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return width;\n}\n","export function fmt(n: number, digits: number) {\n  return n.toLocaleString('en-US', {minimumFractionDigits: digits, maximumFractionDigits: digits});\n}\n\nexport function fmtSeconds(seconds: number) {\n  // 1.0 is actually a plural number too\n  if (seconds >= 120.05) {\n    return `${fmt(seconds / 60, 1)} minutes`;\n  }\n  return `${fmt(seconds, 1)} seconds`;\n}\n\n/**\n * Join non-empty fragments into a sentence, adding full stops when combining\n * more than one fragment.\n */\nexport function withFullStops(...lines: (string | false | 0 | undefined)[]) {\n  return (\n    lines.reduce((acc: string, line) => {\n      if (!line) {\n        return acc;\n      }\n      return (\n        acc +\n        (acc && acc.slice(-1) !== '.' ? '. ' : acc ? ' ' : '') +\n        line +\n        (acc && line.slice(-1) !== '.' ? '.' : '')\n      );\n    }, '') || undefined\n  );\n}\n","import React from 'react';\nimport {DataRate, Region} from '../../AppConfig';\nimport HelpTooltip from '../help/HelpTooltip';\nimport {fmt, fmtSeconds, withFullStops} from './helpers';\n\ntype ResultGridProps = {\n  region: Region;\n  dr: DataRate;\n  size: number;\n  airtime: number;\n  maxPhyPayloadSize: number;\n};\n\n/**\n * A single result, showing the data rate (SF, bandwidth), time on air and\n * calculated limits.\n */\nexport function Result({region, dr, size, airtime, maxPhyPayloadSize}: ResultGridProps) {\n  // Minimum delay in seconds between two packet starts, for maximum 1% duty cycle\n  const dcDelay = airtime / 0.01 / 1000;\n\n  // Maximum messages/day for 30 seconds TTN Fair Access Policy\n  const fapMessages = 30000 / airtime;\n  const fapDelay = (24 * 3600) / fapMessages;\n\n  const maxDwellTime = region.maxDwellTime || 0;\n  const dwellTimeExceeded = maxDwellTime > 0 && airtime > maxDwellTime;\n  const sizeExceeded = dr.maxMacPayloadSize && size > maxPhyPayloadSize;\n\n  // The single `&#x200b;` and double `&#x200b;&#x200b;` markers are used to add\n  // whitespace and newlines when copying; see useClipboard.\n  return (\n    <>\n      <HelpTooltip\n        content={withFullStops(\n          dr.notes,\n          dr.maxMacPayloadSize &&\n            (sizeExceeded\n              ? `The total payload of ${size} bytes exceeds the maximum packet size of ${maxPhyPayloadSize} bytes for ${region.label} SF${dr.sf}BW${dr.bw}`\n              : `For ${region.label} SF${dr.sf}BW${dr.bw} the maximum total packet size is ${maxPhyPayloadSize} bytes`)\n        )}\n      >\n        <div\n          className={`Result-datarate ${\n            sizeExceeded ? 'Result-has-warning' : dr.notes ? 'Result-has-note' : ''\n          }`}\n          role=\"cell\"\n        >\n          <div className=\"Result-dr\">{dr.name}</div>\n          <div>\n            &#x200b;&#x200b;\n            <span className=\"Result-sf\">SF{dr.sf}</span>\n            &#x200b;&#x200b;\n            <span className=\"Result-unit Result-unit-bw\">\n              BW\n              <br />\n              {dr.bw}\n            </span>\n          </div>\n          {sizeExceeded && (\n            <div className={'Result-datarate-warning'}>&#x200b;&#x200b;max size exceeded</div>\n          )}\n        </div>\n      </HelpTooltip>\n\n      <HelpTooltip\n        content={\n          <>\n            On SF{dr.sf}BW{dr.bw}, a total packet size of {size} bytes{' '}\n            <a href={window.location.href}>needs {fmt(airtime, 2)} milliseconds time on air</a>.\n            {dwellTimeExceeded && (\n              <>\n                {' '}\n                This exceeds the maximum dwell time of {fmt(maxDwellTime, 0)} milliseconds for{' '}\n                {region.label}.\n              </>\n            )}\n          </>\n        }\n      >\n        <div\n          className={`Result-airtime ${dwellTimeExceeded ? 'Result-has-warning' : ''}`}\n          role=\"cell\"\n        >\n          <div>\n            {fmt(airtime, 1)}&#x200b;<span className=\"Result-unit\">ms</span>\n          </div>\n          {dwellTimeExceeded && (\n            <div className={'Result-airtime-warning'}>&#x200b;&#x200b;max dwell time exceeded</div>\n          )}\n        </div>\n      </HelpTooltip>\n\n      <HelpTooltip\n        content={\n          <>\n            If regional legal or LoRaWAN maximum duty cycles apply, then a 1% maximum duty cycle\n            needs a <em>minimum</em> of {fmt(dcDelay, 2)} seconds between <em>any</em> subsequent\n            packet starts in the same subband.\n          </>\n        }\n      >\n        <div className=\"Result-dutycycle\" role=\"cell\">\n          <div>\n            {fmt(dcDelay, 1)}\n            &#x200b;\n            <span className=\"Result-unit\">sec</span>\n            &#x200b;&#x200b;\n          </div>\n          <div>\n            {fmt(Math.floor(3600 / dcDelay), 0)}\n            &#x200b;\n            <span className=\"Result-unit\">\n              msg\n              <br />\n              /hour\n            </span>\n          </div>\n        </div>\n      </HelpTooltip>\n\n      <HelpTooltip\n        content={\n          <>\n            {/*{ Links are only added for copy/pasting rich text. On touch devices links in tooltips\n             would be clickable, but still are rendered invisibly, to not confuse the user clicking\n             the link that points back to this very location. }*/}\n            <p>\n              The <a href=\"https://www.thethingsnetwork.org/forum/t/1300\">TTN Fair Access Policy</a>{' '}\n              allows for at most 30 seconds time on air per device, per 24 hours. So, an{' '}\n              <a href={window.location.href}>\n                airtime of {fmt(airtime, 1)} milliseconds for {size} bytes on SF{dr.sf}BW{dr.bw}\n              </a>{' '}\n              imposes a limit of {fmt(fapMessages, 1)} messages per day.\n            </p>\n            {/* Add newlines between paragraphs in case we're copy/pasting plain text. */}\n            {'\\n\\n'}\n            <p>\n              When transmitting all day, <strong>on average</strong> this needs a minimum of{' '}\n              {fmtSeconds(fapDelay)} between the starts of two uplinks, or a maximum of{' '}\n              {fmt(fapMessages / 24, 1)}\n              &nbsp;messages per hour.\n            </p>\n          </>\n        }\n      >\n        <div className=\"Result-fairaccess\" role=\"cell\">\n          <div className=\"Result-fairaccess-messages\">\n            {fmt((24 * 3600) / fapMessages, 1)}\n            &#8203;\n            <span className=\"Result-unit\">\n              sec&#8203;\n              <br />\n              (avg)\n            </span>\n            &#8203;&#8203;\n          </div>\n          <div>\n            <span className=\"Result-fairaccess-messages-per-hour\">{fmt(fapMessages / 24, 1)}</span>\n            &#8203;\n            <span className=\"Result-unit Result-unit-hour\">\n              avg\n              <br />\n              /hour\n            </span>\n            &#8203;&#8203;\n          </div>\n          <div className=\"Result-fairaccess-messages-per-day\">\n            {fmt(Math.floor(fapMessages), 0)}\n            &#8203;\n            <span className=\"Result-unit\">\n              msg\n              <br />\n              /24h\n            </span>\n          </div>\n        </div>\n      </HelpTooltip>\n    </>\n  );\n}\n","import React from 'react';\nimport {Region} from '../../AppConfig';\nimport Airtime, {CodingRate} from '../../lora/Airtime';\nimport {Result} from './Result';\n\ntype ResultsProps = {\n  region: Region;\n  packetSize: number;\n  codingRate: CodingRate;\n};\n\n/**\n * Shows the results of the airtime calculations.\n */\nexport default function Results({region, packetSize, codingRate}: ResultsProps) {\n  if (!codingRate) {\n    return null;\n  }\n\n  const results = region.dataRates.map((dr, idx) => {\n    const airtime = Airtime.calculate(packetSize, dr.sf, dr.bw, codingRate);\n    // PHYPayload = MHDR[1] | MACPayload[..] | MIC[4]\n    const maxPhyPayloadSize = dr.maxMacPayloadSize + 5;\n    const tooLong =\n      (region.maxDwellTime && airtime > region.maxDwellTime) ||\n      (dr.maxMacPayloadSize && packetSize > maxPhyPayloadSize);\n    const oddEven = `Results-result-${idx % 2 ? 'odd' : 'even'}`;\n    const highlight = `Results-result-highlight-${tooLong ? 'warning' : dr.highlight || 'none'}`;\n\n    return (\n      <div key={dr.name} className={`Results-result ${oddEven} ${highlight}`} role={'row'}>\n        <Result\n          size={packetSize}\n          region={region}\n          dr={dr}\n          airtime={airtime}\n          maxPhyPayloadSize={maxPhyPayloadSize}\n        />\n      </div>\n    );\n  });\n\n  return (\n    <>\n      <div\n        className={`Results-grid Results-grid-${results.length}`}\n        role=\"table\"\n        data-label={`Time on air and limitations for a full LoRaWAN packet of ${packetSize} bytes in ${region.label}:`}\n      >\n        <div role=\"rowgroup\">\n          <div className={`Results-legend`} role=\"row\">\n            <div role=\"columnheader\">data rate</div>\n            <div role=\"columnheader\">airtime</div>\n            <div role=\"columnheader\">1%&nbsp;max duty&nbsp;cycle</div>\n            <div role=\"columnheader\">fair access policy</div>\n          </div>\n        </div>\n        <div role=\"rowgroup\">{results}</div>\n      </div>\n    </>\n  );\n}\n","import React, {useEffect, useRef, useState} from 'react';\nimport './HorizontalScroll.scss';\n\ntype HorizontalScrollProps = {\n  children: React.ReactNode;\n};\n\n/**\n * Wraps the children in a container that makes it never wrap, removes any\n * scrollbars and adds buttons for scrolling.\n */\nexport default function HorizontalScroll({children}: HorizontalScrollProps) {\n  const scrollContainer = useRef<HTMLDivElement>(null);\n  const [hasOverflowLeft, setHasOverflowLeft] = useState(false);\n  const [hasOverflowRight, setHasOverflowRight] = useState(false);\n\n  const scrollX = (x: number) => {\n    const scroll = scrollContainer.current;\n    if (scroll) {\n      scroll.scrollBy(x, 0);\n    }\n  };\n\n  const scrollLeft = () => {\n    scrollX(-40);\n  };\n\n  const scrollRight = () => {\n    scrollX(40);\n  };\n\n  useEffect(() => {\n    const scroll = scrollContainer.current;\n    const handleScroll = () => {\n      if (!scroll) {\n        console.log('No scroll element');\n      } else {\n        const hasOverflowLeft = scroll.scrollLeft > 0;\n        // Allow for 1 pixel of rounding errors\n        const hasOverflowRight = scroll.scrollWidth - scroll.offsetWidth > scroll.scrollLeft + 1;\n        setHasOverflowLeft(hasOverflowLeft);\n        setHasOverflowRight(hasOverflowRight);\n      }\n    };\n\n    if (scroll) {\n      // Initial configuration\n      handleScroll();\n      window.addEventListener('resize', handleScroll);\n      scroll.addEventListener('scroll', handleScroll);\n\n      return () => {\n        scroll.removeEventListener('scroll', handleScroll);\n        window.removeEventListener('resize', handleScroll);\n      };\n    }\n  }, []);\n\n  return (\n    <div\n      className={\n        'd-flex justify-content-center align-items-center horizontal-scroll' +\n        (hasOverflowLeft ? ' horizontal-scroll--overflow-left' : '') +\n        (hasOverflowRight ? ' horizontal-scroll--overflow-right' : '')\n      }\n    >\n      <div\n        className={\n          'horizontal-scroll__button' +\n          (hasOverflowLeft ? ' horizontal-scroll__button--enabled' : '')\n        }\n        onClick={scrollLeft}\n      >\n        &lsaquo;\n      </div>\n      <div className={'horizontal-scroll__content table-responsive'} ref={scrollContainer}>\n        {children}\n      </div>\n      <div\n        className={\n          'horizontal-scroll__button' +\n          (hasOverflowRight ? ' horizontal-scroll__button--enabled' : '')\n        }\n        onClick={scrollRight}\n      >\n        &rsaquo;\n      </div>\n    </div>\n  );\n}\n","import {History, Location} from 'history';\nimport {AppConfig, Network, Region} from '../../AppConfig';\n\n/**\n * Custom URL handling:\n *\n * - Updated URL for almost each change in the user input\n * - URL does not include default values, and no trailing slash if all\n * parameters are defaults\n * - Changing the network or region only replaces part of the URL, without\n * wiping the trailing parameters\n */\n\nexport function parseUrl(\n  history: History,\n  location: Location,\n  config: AppConfig\n): {network: Network | undefined; region: Region | undefined; parameters: string | undefined} {\n  // Due to using `<Router basename={process.env.PUBLIC_URL}>`, even when deployed in a subfolder,\n  // location.pathname will only include a leading slash followed by our application's URL segments.\n  // So, no need to strip process.env.PUBLIC_URL here.\n  const [, networkName, regionName, parameters] = location.pathname.split('/');\n  const network = config.networks.find((network) => network.name === networkName);\n  const region = network ? network.regions.find((region) => region.name === regionName) : undefined;\n  return {network, region, parameters};\n}\n\nexport function setUrl(\n  history: History,\n  location: Location,\n  config: AppConfig,\n  network: Network,\n  region: Region,\n  parameters?: string\n) {\n  const current = parseUrl(history, location, config);\n  // current.parameters might be undefined as well\n  const params = parameters === undefined ? current.parameters : parameters;\n  const url = '/' + network.name + '/' + region.name + (params ? '/' + params : '');\n  if (location.pathname === url) {\n    return;\n  }\n  // Due to using `<Router basename={process.env.PUBLIC_URL}>` this adds the process.env.PUBLIC_URL prefix\n  history.replace(url);\n}\n","import React, {useState} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport ReactMarkdown from 'react-markdown';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {AppConfig, Region} from '../../AppConfig';\nimport {CodingRate} from '../../lora/Airtime';\nimport UserInput from '../input/UserInput';\nimport Graph from '../result/Graph';\nimport Results from '../result/Results';\nimport HorizontalScroll from '../scroll/HorizontalScroll';\nimport {parseUrl, setUrl} from './Router';\n\ntype CalculatorProps = {\n  config: AppConfig;\n} & RouteComponentProps;\n\n/**\n * The user inputs and the calculated results.\n *\n * Most state is also kept in the URL, as we want that to be copy-paste ready.\n */\nexport default function Calculator(props: CalculatorProps) {\n  // The real defaults are set in the UserInput component, and posted back\n  // using callbacks\n  const [packetSize, setPacketSize] = useState<number>(null as any);\n  const [codingRate, setCodingRate] = useState<CodingRate>(null as any);\n\n  const changeUrl = setUrl.bind(null, props.history, props.location, props.config);\n  const {network, region, parameters} = parseUrl(props.history, props.location, props.config);\n\n  if (!network) {\n    const n = props.config.networks[0];\n    const r = n.regions.find((r) => r.name === n.defaultRegion) as Region;\n    changeUrl(n, r);\n    return null;\n  }\n\n  if (!region) {\n    const r = network.regions.find((r) => r.name === network.defaultRegion) as Region;\n    changeUrl(network, r);\n    return null;\n  }\n\n  const handlePacketSizeChange = (size: number) => {\n    setPacketSize(size);\n  };\n\n  const handleCodingRateChange = (cr: CodingRate) => {\n    setCodingRate(cr);\n  };\n\n  /**\n   * Saves the updated user configuration in the current URL.\n   */\n  const handleParametersChange = (parameters: string) => {\n    changeUrl(network, region, parameters);\n  };\n\n  const setRegion = (region: Region) => {\n    changeUrl(network, region);\n  };\n\n  return (\n    <>\n      <Row>\n        <Col>\n          <HorizontalScroll>\n            <ButtonGroup>\n              {network.regions.map((r) => (\n                <Button\n                  variant=\"outline-primary\"\n                  size=\"sm\"\n                  active={r.name === region.name}\n                  disabled={!r.dataRates}\n                  key={r.name}\n                  onClick={() => setRegion(r)}\n                >\n                  {r.label}\n                </Button>\n              ))}\n            </ButtonGroup>\n          </HorizontalScroll>\n        </Col>\n      </Row>\n\n      <Row>\n        <hr />\n      </Row>\n\n      <Row className=\"justify-content-sm-center\">\n        <Col>\n          <h3>{region.title}</h3>\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-center\">\n        <Col>\n          <UserInput\n            userConfig={parameters}\n            setUserConfig={handleParametersChange}\n            setPacketSize={handlePacketSizeChange}\n            setCodingRate={handleCodingRateChange}\n          />\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-center\">\n        <Col>\n          <Results region={region} packetSize={packetSize} codingRate={codingRate} />\n          <hr />\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"8\">{region.limitations && <ReactMarkdown source={region.limitations} />}</Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"8\">\n          <p>\n            Increasing the spreading factor SF by one step almost doubles the time on air (for the\n            same bandwidth BW). This also means that, say, a single transmission on SF10 takes more\n            time than 6&nbsp;transmissions on SF7, or may need about the same airtime as\n            3&nbsp;transmissions on SF7, SF8 and SF9 combined. This is why using{' '}\n            <a href=\"https://lora-developers.semtech.com/library/tech-papers-and-guides/understanding-adr\">\n              ADR\n            </a>{' '}\n            or{' '}\n            <a href=\"https://lora-developers.semtech.com/library/tech-papers-and-guides/blind-adr\">\n              Blind ADR\n            </a>{' '}\n            is important.\n          </p>\n          <p>\n            The LoRa radio modulation, interleaving and forward error correction{' '}\n            <a href=\"https://www.epfl.ch/labs/tcl/wp-content/uploads/2020/02/Reverse_Eng_Report.pdf\">\n              yield fixed-length blocks\n            </a>{' '}\n            for the transmissions, so a small change in the payload size does not always imply a\n            change in the time on air. The start of new blocks is not the same for each data rate,\n            and the block size may also alternate within a single data rate. The following graph\n            shows the time on air for the <em>total</em> payload sizes as allowed for each data rate\n            for {region.label}, highlighting the currently selected total packet size of{' '}\n            {packetSize}&nbsp;bytes.\n          </p>\n        </Col>\n      </Row>\n\n      <Row className=\"Graph justify-content-center\">\n        <Col>\n          <Graph region={region} selectedPacketSize={packetSize} codingRate={codingRate} />\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"8\">{region.countries && <ReactMarkdown source={region.countries} />}</Col>\n      </Row>\n    </>\n  );\n}\n","import React, {ReactElement, useEffect, useRef, useState} from 'react';\nimport {default as BsToast} from 'react-bootstrap/Toast';\nimport {AppNotification} from './AppNotification';\nimport './Toast.scss';\n\n/**\n * The interval at which the notification toast should be updated, like to show\n * some feedback to the user. (Of course, when there is no need for re-rendering\n * until endTime is reached, then one should rewrite this component to simply\n * set the timeout to match the end time.)\n *\n * Note that most browsers throttle timeouts for background tabs to 1 second.\n * But even then it's okay to specify a smaller number as this component uses\n * timestamps internally.\n */\nconst INTERVAL_MS = 1000;\n\ntype ToastProps = {\n  notification?: AppNotification;\n};\n\n/**\n * A basic, single (non-stacked) notification, that auto-hides based on the\n * length of the notification text.\n */\nexport default function Toast({notification}: ToastProps) {\n  const [endTime, setEndTime] = useState<number>(0);\n  const [lastTimeout, setLastTimeout] = useState<number>(0);\n  const timeoutHandle = useRef<number | null>(0);\n\n  // Handle new/changed notification\n  useEffect(() => {\n    if (notification) {\n      const text = textContent(notification.title) + textContent(notification.content);\n      const timeout = Math.max(3000, 70 * text.length);\n      // Assuming the new endTime is never the same as the last, this also\n      // triggers the next effect which sets the (first) timeout\n      setEndTime(Date.now() + timeout);\n    }\n  }, [notification]);\n\n  // Set a timer to update and eventually hide the notification\n  useEffect(() => {\n    if (timeoutHandle.current) {\n      // A timeout was already scheduled but the notification (and hence the end\n      // time) changed\n      window.clearTimeout(timeoutHandle.current);\n    }\n\n    // Ensure a new timeout is even scheduled when the end time expired just\n    // now: when a timeout has changed state for lastTimeout then this effect is\n    // not invoked until AFTER a new render completed. This could imply that\n    // during the render it would be decided that the notification should be\n    // displayed, but, due to time having advanced a bit, no new timeout would\n    // be scheduled right here. And as this effect does not change any state,\n    // no additional render would happen either, so outdated results would be\n    // added to the DOM and show until eventually a new notification were set.\n    if (endTime - lastTimeout > 0) {\n      timeoutHandle.current = window.setTimeout(() => {\n        timeoutHandle.current = null;\n        // Trigger component rendering and execution of this very effect\n        setLastTimeout(Date.now());\n      }, INTERVAL_MS);\n    }\n  }, [endTime, lastTimeout]);\n\n  const close = () => {\n    setEndTime(Date.now());\n  };\n\n  const timeLeft = (endTime - Date.now()) / 1000;\n\n  if (timeLeft <= 0 || !notification) {\n    return null;\n  }\n\n  return (\n    <BsToast className=\"Toast\" onClose={close} onClick={close}>\n      <BsToast.Header>\n        <strong className=\"mr-auto header\">{notification.title}</strong>\n        <small>{timeLeft.toFixed(0)}</small>\n      </BsToast.Header>\n      {notification.content ? <BsToast.Body>{notification.content}</BsToast.Body> : null}\n    </BsToast>\n  );\n}\n\n/**\n * Traverse any props.children to get their combined text content.\n *\n * This does not add whitespace for readability: `<p>Hello <em>world</em>!</p>`\n * yields `Hello world!` as expected, but `<p>Hello</p><p>world</p>` returns\n * `Helloworld`.\n *\n * NOTE: This may be very dependent on the internals of React.\n */\nfunction textContent(elem: ReactElement | string | undefined): string {\n  if (!elem) {\n    return '';\n  }\n\n  if (typeof elem === 'string') {\n    return elem;\n  }\n\n  // Debugging for basic content shows that props.children, if any, is either a\n  // ReactElement, or a string, or an Array with any combination. Like for\n  // `<p>Hello <em>world</em>!</p>`:\n  //\n  //   $$typeof: Symbol(react.element)\n  //   type: \"p\"\n  //   props:\n  //     children:\n  //       - \"Hello \"\n  //       - $$typeof: Symbol(react.element)\n  //         type: \"em\"\n  //         props:\n  //           children: \"world\"\n  //       - \"!\"\n  const children = elem.props && elem.props.children;\n\n  if (children instanceof Array) {\n    return children.map(textContent).join('');\n  }\n\n  return textContent(children);\n}\n","import axios from 'axios';\nimport React, {useEffect, useState} from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport GithubCorner from 'react-github-corner';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.scss';\nimport {AppConfig} from './AppConfig';\nimport Calculator from './components/calculator/Calculator';\nimport Toast from './components/notification/Toast';\nimport useClipboard from './hooks/clipboard/useClipboard';\n\n/**\n * Loads the JSON configuration file and renders the application.\n */\nexport default function App() {\n  const configUrl = process.env.PUBLIC_URL + '/config.json';\n  const [progress, setProgress] = useState<string | null>('Loading configuration...');\n  const [config, setConfig] = useState({} as AppConfig);\n\n  useEffect(() => {\n    let didCancel = false;\n    const fetchConfig = async () => {\n      try {\n        // By default, axios expects JSON in UTF8, and converts that on the fly\n        const result = (await axios.get<AppConfig>(configUrl)).data;\n        if (!didCancel) {\n          setProgress(null);\n          setConfig(result);\n        }\n      } catch (error) {\n        // TODO fine for 404, but this does not catch JSON parse errors?\n        setProgress(\n          `Failed to load configuration ${process.env.PUBLIC_URL} ${configUrl}: ${error}`\n        );\n      }\n    };\n\n    // Workaround to suppress the following React warning:\n    //   Warning: useEffect function must return a cleanup function or nothing.\n    //   Promises and useEffect(async () => ...) are not supported, but you can\n    //   call an async function inside an effect.\n    // This still makes the compiler warn about ignoring the returned Promise.\n    fetchConfig();\n    return () => {\n      didCancel = true;\n    };\n  }, [configUrl]);\n\n  const {notification: copyNotification} = useClipboard();\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Container fluid className=\"App\">\n        <Toast notification={copyNotification} />\n        <Row>\n          <Col>\n            <h1>Airtime calculator for LoRaWAN</h1>\n            {/*TODO check if IE does not show text null */}\n            <p>{progress}</p>\n          </Col>\n        </Row>\n        {config.networks && <Route render={(props) => <Calculator {...props} config={config} />} />}\n        <GithubCorner href=\"https://github.com/avbentem/airtime-calculator\" />\n      </Container>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as {env: {[key: string]: string}}).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see\n      // https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still\n        // exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}